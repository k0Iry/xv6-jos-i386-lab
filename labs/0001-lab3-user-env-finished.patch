From 3937e6fb736492a7fe74474b4d8c6e35465d155b Mon Sep 17 00:00:00 2001
From: Aaron <kljsandjb@me.com>
Date: Thu, 18 Jun 2020 18:47:15 +0200
Subject: [PATCH] lab3 user env finished

challenge finished:
1. breakpoint single-stepping debugging
2. implement sysenter for faster system call
---
 inc/x86.h        |  7 ++++
 kern/env.c       | 75 ++++++++++++++++++++++++++++++++++--
 kern/kdebug.c    |  6 +++
 kern/monitor.c   | 43 ++++++++++++++++++---
 kern/monitor.h   |  1 +
 kern/pmap.c      | 21 ++++++++++
 kern/syscall.c   | 18 ++++++++-
 kern/trap.c      | 99 ++++++++++++++++++++++++++++++++++++++++++++++++
 kern/trapentry.S | 58 ++++++++++++++++++++++++++++
 lib/libmain.c    |  3 +-
 lib/syscall.c    | 38 +++++++++++++++++--
 user/testbss.c   |  2 +-
 12 files changed, 355 insertions(+), 16 deletions(-)

diff --git a/inc/x86.h b/inc/x86.h
index cc15ff4..0e679c5 100644
--- a/inc/x86.h
+++ b/inc/x86.h
@@ -248,6 +248,13 @@ read_tsc(void)
 	return tsc;
 }
 
+static inline void
+wrmsr(uint32_t msr, uint32_t eax, uint32_t edx)
+{
+	asm volatile("wrmsr"
+		: :"c" (msr), "a" (eax), "d" (edx));
+}
+
 static inline uint32_t
 xchg(volatile uint32_t *addr, uint32_t newval)
 {
diff --git a/kern/env.c b/kern/env.c
index db2fda9..08e9523 100644
--- a/kern/env.c
+++ b/kern/env.c
@@ -116,6 +116,12 @@ env_init(void)
 {
 	// Set up envs array
 	// LAB 3: Your code here.
+	for (int i = NENV - 1; i >= 0; i--)
+	{
+		envs[i].env_id = 0;
+		envs[i].env_link = env_free_list;
+		env_free_list = envs + i;
+	}
 
 	// Per-CPU part of the initialization
 	env_init_percpu();
@@ -179,9 +185,18 @@ env_setup_vm(struct Env *e)
 	//    - The functions in kern/pmap.h are handy.
 
 	// LAB 3: Your code here.
-
+	p->pp_ref++;
+	e->env_pgdir = (pte_t *)page2kva(p);
+	// we can copy kern part of PDEs from kern_pgdir
+	// no need to allocate more physical memory and map again
+	for (int start = PDX(UTOP); start < 1024; start ++)
+	{
+		e->env_pgdir[start] = kern_pgdir[start];
+	}
 	// UVPT maps the env's own page table read-only.
 	// Permissions: kernel R, user R
+	// need to update, if we keep the copy from kern_pgdir,
+	// it will point to kern_pgdir itself, not env_pgdir
 	e->env_pgdir[PDX(UVPT)] = PADDR(e->env_pgdir) | PTE_P | PTE_U;
 
 	return 0;
@@ -267,6 +282,21 @@ region_alloc(struct Env *e, void *va, size_t len)
 	//   'va' and 'len' values that are not page-aligned.
 	//   You should round va down, and round (va + len) up.
 	//   (Watch out for corner-cases!)
+
+	// page that contains va & va + len
+	uint32_t start = (uint32_t)ROUNDDOWN(va, PGSIZE);
+	uint32_t end = (uint32_t)ROUNDUP(va + len, PGSIZE);
+
+	for (uint32_t va = start; va < end; va += PGSIZE)
+	{
+		pte_t *pgtbl = pgdir_walk(e->env_pgdir, (const void *)va, 1);
+		struct PageInfo *pg_info = NULL;
+		if (!(*pgtbl & PTE_P))	// for already-mapped page, we don't init it in any way
+			pg_info = page_alloc(ALLOC_ZERO);
+		if (pg_info == NULL)
+			panic("page_alloc: %e", -E_NO_MEM);
+		*pgtbl = page2pa(pg_info) | PTE_P | PTE_U | PTE_W;
+	}
 }
 
 //
@@ -323,11 +353,34 @@ load_icode(struct Env *e, uint8_t *binary)
 	//  What?  (See env_run() and env_pop_tf() below.)
 
 	// LAB 3: Your code here.
-
+	struct Elf *elf_header = (struct Elf *)binary;
+	if (elf_header->e_magic != ELF_MAGIC)
+		panic("invalid elf file");
+
+	struct Proghdr *ph, *eph;
+	ph = (struct Proghdr *)((uint8_t *)elf_header + elf_header->e_phoff);
+	eph = ph + elf_header->e_phnum;
+
+	for (; ph < eph; ph++)
+	{
+		if (ph->p_type == ELF_PROG_LOAD && ph->p_filesz <= ph->p_memsz)
+		{
+			region_alloc(e, (void *)ph->p_va, ph->p_memsz);
+			lcr3(PADDR(e->env_pgdir));
+			memmove((void *)ph->p_va, (void*)(binary + ph->p_offset), ph->p_filesz);
+			lcr3(PADDR(kern_pgdir));
+		}
+	}
+	e->env_tf.tf_eip = elf_header->e_entry;
 	// Now map one page for the program's initial stack
 	// at virtual address USTACKTOP - PGSIZE.
 
 	// LAB 3: Your code here.
+	struct PageInfo *stack_page = page_alloc(ALLOC_ZERO);
+	if (page_insert(e->env_pgdir, stack_page, (void *)(USTACKTOP - PGSIZE), PTE_U | PTE_W) != 0)
+	{
+		panic("alloc user stack");
+	}
 }
 
 //
@@ -341,6 +394,11 @@ void
 env_create(uint8_t *binary, enum EnvType type)
 {
 	// LAB 3: Your code here.
+	struct Env *new_env;
+	if (env_alloc(&new_env, 0) != 0)
+		panic("env_alloc");
+	load_icode(new_env, binary);
+	new_env->env_type = type;
 }
 
 //
@@ -457,7 +515,18 @@ env_run(struct Env *e)
 	//	e->env_tf to sensible values.
 
 	// LAB 3: Your code here.
+	if (curenv != NULL && curenv != e)
+	{
+		if (curenv->env_status == ENV_RUNNING)
+			curenv->env_status = ENV_RUNNABLE;
+	}
+	curenv = e;
+	curenv->env_status = ENV_RUNNING;
+	curenv->env_runs ++;
+
+	lcr3(PADDR(curenv->env_pgdir));
+	env_pop_tf(&(curenv->env_tf));
 
-	panic("env_run not yet implemented");
+	// panic("env_run not yet implemented");
 }
 
diff --git a/kern/kdebug.c b/kern/kdebug.c
index 31177c8..526656f 100644
--- a/kern/kdebug.c
+++ b/kern/kdebug.c
@@ -142,6 +142,8 @@ debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)
 		// Make sure this memory is valid.
 		// Return -1 if it is not.  Hint: Call user_mem_check.
 		// LAB 3: Your code here.
+		if (user_mem_check(curenv, usd, sizeof(struct UserStabData), PTE_P | PTE_U) < 0)
+			return -1;
 
 		stabs = usd->stabs;
 		stab_end = usd->stab_end;
@@ -150,6 +152,10 @@ debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)
 
 		// Make sure the STABS and string table memory is valid.
 		// LAB 3: Your code here.
+		if (user_mem_check(curenv, stabs, sizeof(struct Stab) * (stab_end - stabs), PTE_P | PTE_U) < 0)
+			return -1;
+		if (user_mem_check(curenv, stabstr, stabstr_end - stabstr, PTE_P | PTE_U) < 0)
+			return -1;
 	}
 
 	// String table validity checks
diff --git a/kern/monitor.c b/kern/monitor.c
index 4959e59..ea89908 100644
--- a/kern/monitor.c
+++ b/kern/monitor.c
@@ -27,7 +27,8 @@ static struct Command commands[] = {
 	{ "help", "Display this list of commands", mon_help },
 	{ "kerninfo", "Display information about the kernel", mon_kerninfo },
 	{ "backtrace", "Display backtrace to current function call", mon_backtrace},
-	{ "showmappings", "Display memory mappings in current active address space", mon_showmappings}
+	{ "showmappings", "Display memory mappings in current active address space", mon_showmappings},
+	{ "debug", "Debug purpose", mon_debug}
 };
 
 /***** Implementations of basic kernel monitor commands *****/
@@ -109,16 +110,16 @@ int mon_showmappings(int argc, char **argv, struct Trapframe *tf)
 
 	size_t range = (high_addr - low_addr) / PGSIZE;
 
-	for (int i = 0; i <= range; i++)
+	for (int i = 0; i < range; i++)
 	{
 		pte_t *pgtbl_entry = NULL;
 		const void *vir_addr = (const void *)(low_addr + i * PGSIZE);
-		if (!(pgtbl_entry = pgdir_walk(entry_pgdir, vir_addr, 0)))
+		if (!(pgtbl_entry = pgdir_walk(entry_pgdir, vir_addr, 0)) || !(*pgtbl_entry & PTE_P))
 		{
-			if (!(pgtbl_entry = pgdir_walk(kern_pgdir, vir_addr, 0)))
+			if (!(pgtbl_entry = pgdir_walk(kern_pgdir, vir_addr, 0)) || !(*pgtbl_entry & PTE_P))
 			{
-				cprintf("Invalid mappings, perhaps accessing USER level, not supported yet\n");
-				return 1;
+				cprintf("Invalid mappings at 0x%08x, perhaps accessing USER level, not supported yet\n", vir_addr);
+				continue;
 			}
 		}
 		cprintf("\tVirtual address 0x%08x mapped to physical address 0x%08x\n", vir_addr, PTE_ADDR(*pgtbl_entry) + PGOFF(vir_addr));
@@ -127,6 +128,36 @@ int mon_showmappings(int argc, char **argv, struct Trapframe *tf)
 	return 0;
 }
 
+int mon_debug(int argc, char **argv, struct Trapframe *tf)
+{
+	if (tf == NULL)
+	{
+		cprintf("No user process is running!\n");
+		return 0;
+	}
+
+	if (argc != 2)
+	{
+		cprintf("usage 'si' for single-step debug, 'continue' for continue till end...\n");
+		return 0;
+	}
+
+	extern void env_run(struct Env *e);
+	extern struct Env *curenv;
+	if (strncmp("si", argv[1], 10) == 0)
+	{
+		env_run(curenv);
+	}
+	if (strncmp("continue", argv[1], 10) == 0)
+	{
+		// clear TF flag to disable IRQ1
+		tf->tf_eflags &= ~0x100;
+		env_run(curenv);
+	}
+
+	return 0;
+}
+
 /***** Kernel monitor command interpreter *****/
 
 #define WHITESPACE "\t\r\n "
diff --git a/kern/monitor.h b/kern/monitor.h
index 35d2793..303cbdc 100644
--- a/kern/monitor.h
+++ b/kern/monitor.h
@@ -16,5 +16,6 @@ int mon_help(int argc, char **argv, struct Trapframe *tf);
 int mon_kerninfo(int argc, char **argv, struct Trapframe *tf);
 int mon_backtrace(int argc, char **argv, struct Trapframe *tf);
 int mon_showmappings(int argc, char **argv, struct Trapframe *tf);
+int mon_debug(int argc, char **argv, struct Trapframe *tf);
 
 #endif	// !JOS_KERN_MONITOR_H
diff --git a/kern/pmap.c b/kern/pmap.c
index 9b6334f..5d47498 100644
--- a/kern/pmap.c
+++ b/kern/pmap.c
@@ -176,6 +176,9 @@ mem_init(void)
 	//////////////////////////////////////////////////////////////////////
 	// Make 'envs' point to an array of size 'NENV' of 'struct Env'.
 	// LAB 3: Your code here.
+	envs = (struct Env *) boot_alloc(NENV * sizeof(struct Env));
+	memset(envs, 0, NENV * sizeof(struct Env));
+	cprintf("envs are located starting from 0x%08x\n", PADDR(envs));
 
 	//////////////////////////////////////////////////////////////////////
 	// Now that we've allocated the initial kernel data structures, we set
@@ -208,6 +211,7 @@ mem_init(void)
 	//    - the new image at UENVS  -- kernel R, user R
 	//    - envs itself -- kernel RW, user NONE
 	// LAB 3: Your code here.
+	boot_map_region(kern_pgdir, UENVS, ROUNDUP(NENV * sizeof(struct Env), PGSIZE), PADDR(envs), PTE_U | PTE_W);
 
 	//////////////////////////////////////////////////////////////////////
 	// Use the physical memory that 'bootstack' refers to as the kernel
@@ -632,6 +636,23 @@ int
 user_mem_check(struct Env *env, const void *va, size_t len, int perm)
 {
 	// LAB 3: Your code here.
+	uint32_t start = (uint32_t)ROUNDDOWN(va, PGSIZE);
+	uint32_t end = ROUNDUP(((uint32_t)va + len), PGSIZE);
+	for (uint32_t pg = start; pg < end; pg += PGSIZE)
+	{
+		if (pg >= ULIM)
+		{
+			user_mem_check_addr = pg == start ? (uintptr_t)va : pg;
+			return -E_FAULT;
+		}
+
+		pte_t *pgtbl_entry = pgdir_walk(env->env_pgdir, (const void *)pg, 0);
+		if (!pgtbl_entry || !(*pgtbl_entry & perm))
+		{
+			user_mem_check_addr = pg == start ? (uintptr_t)va : pg;
+			return -E_FAULT;
+		}
+	}
 
 	return 0;
 }
diff --git a/kern/syscall.c b/kern/syscall.c
index 414d489..96486a1 100644
--- a/kern/syscall.c
+++ b/kern/syscall.c
@@ -21,6 +21,12 @@ sys_cputs(const char *s, size_t len)
 	// Destroy the environment if not.
 
 	// LAB 3: Your code here.
+	user_mem_assert(curenv, s, len, PTE_P);
+	cprintf("Will write from address: 0x%08x to address: 0x%08x\n", s, s + len);
+	if ((uint32_t)ROUNDUP(s, PGSIZE) != USTACKTOP || (uint32_t)ROUNDUP(s + len, PGSIZE) != USTACKTOP)
+	{
+		env_destroy(curenv);
+	}
 
 	// Print the string supplied by the user.
 	cprintf("%.*s", len, s);
@@ -70,9 +76,19 @@ syscall(uint32_t syscallno, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4,
 	// Return any appropriate return value.
 	// LAB 3: Your code here.
 
-	panic("syscall not implemented");
+	// panic("syscall not implemented");
 
 	switch (syscallno) {
+	case SYS_cputs:
+		sys_cputs((const char *)a1, a2);
+		return 0;
+	case SYS_cgetc:
+		return sys_cgetc();
+	case SYS_getenvid:
+		return sys_getenvid();
+	case SYS_env_destroy:
+		return sys_env_destroy(a1);
+	case NSYSCALLS:
 	default:
 		return -E_INVAL;
 	}
diff --git a/kern/trap.c b/kern/trap.c
index e27b556..595666f 100644
--- a/kern/trap.c
+++ b/kern/trap.c
@@ -25,6 +25,61 @@ struct Pseudodesc idt_pd = {
 	sizeof(idt) - 1, (uint32_t) idt
 };
 
+typedef void (*trap_handler)(void);
+
+void divide();
+void debug();
+void nmi();
+void brkpt();	// needs user level privilege
+void oflow();
+void bound();
+void illop();
+void device();
+void dblflt();
+void corproc();
+void tss();
+void segnp();
+void stack();
+void gpflt();
+void pgflt();	// needs kernel level privilege
+void res();
+void fperr();
+void align();
+void mchk();
+void simderr();
+void systemcall();
+void do_nothing(){}
+
+static trap_handler get_trap_handler(int trapno)
+{
+	static const trap_handler funcs[256] = {
+		divide,
+		debug,
+		nmi,
+		brkpt,
+		oflow,
+		bound,
+		illop,
+		device,
+		dblflt,
+		corproc,
+		tss,
+		segnp,
+		stack,
+		gpflt,
+		pgflt,
+		res,
+		fperr,
+		align,
+		mchk,
+		simderr,
+		[20 ... 47] = do_nothing,
+		[48] = systemcall,
+		[49 ... 255] = do_nothing
+	};
+
+	return funcs[trapno];
+}
 
 static const char *trapname(int trapno)
 {
@@ -63,8 +118,29 @@ void
 trap_init(void)
 {
 	extern struct Segdesc gdt[];
+	extern void sysenter_handler();
 
 	// LAB 3: Your code here.
+	wrmsr(0x174, GD_KT, 0);		// set (CPL = 0) CS & SS
+	wrmsr(0x176, (uint32_t)sysenter_handler, 0);		// the sysenter handler address
+	wrmsr(0x175, KSTACKTOP, 0);	// the stack where we drop in when trapped into kernel
+
+	int vector = 0;
+	for (; vector < 32; vector++)
+	{
+		// 0-31 for TRAPs
+		if (vector == T_BRKPT)
+		{
+			SETGATE(idt[vector], 1, GD_KT, get_trap_handler(vector), gdt[GD_UT >> 3].sd_dpl);
+			continue;
+		}
+		SETGATE(idt[vector], 1, GD_KT, get_trap_handler(vector), gdt[GD_KT >> 3].sd_dpl);
+	}
+	for (; vector < 256; vector++)
+	{
+		// 32 - 255 for IRQs (user defined)
+		SETGATE(idt[vector], 0, GD_KT, get_trap_handler(vector), gdt[GD_UT >> 3].sd_dpl);
+	}
 
 	// Per-CPU setup 
 	trap_init_percpu();
@@ -144,6 +220,24 @@ trap_dispatch(struct Trapframe *tf)
 {
 	// Handle processor exceptions.
 	// LAB 3: Your code here.
+	if (tf->tf_trapno == T_PGFLT)
+		page_fault_handler(tf);
+	if (tf->tf_trapno == T_BRKPT)
+	{
+		// enable single-step mode for debugging,
+		// a debug exception will be generated
+		// after each instruction
+		tf->tf_eflags |= 0x100;
+		monitor(tf);
+	}
+	if (tf->tf_trapno == T_DEBUG)
+		monitor(tf);
+	if (tf->tf_trapno == T_SYSCALL)
+	{
+		tf->tf_regs.reg_eax = syscall(tf->tf_regs.reg_eax, tf->tf_regs.reg_edx, tf->tf_regs.reg_ecx,
+				tf->tf_regs.reg_ebx, tf->tf_regs.reg_edi, tf->tf_regs.reg_esi);
+		return;
+	}
 
 	// Unexpected trap: The user process or the kernel has a bug.
 	print_trapframe(tf);
@@ -205,6 +299,11 @@ page_fault_handler(struct Trapframe *tf)
 	// Handle kernel-mode page faults.
 
 	// LAB 3: Your code here.
+	if (tf->tf_cs == GD_KT)
+	{
+		print_trapframe(tf);
+		panic("page fault happens in kernel mode");
+	}
 
 	// We've already handled kernel-mode exceptions, so if we get here,
 	// the page fault happened in user mode.
diff --git a/kern/trapentry.S b/kern/trapentry.S
index 22fc640..11fd5e1 100644
--- a/kern/trapentry.S
+++ b/kern/trapentry.S
@@ -46,10 +46,68 @@
 /*
  * Lab 3: Your code here for generating entry points for the different traps.
  */
+TRAPHANDLER_NOEC(divide, T_DIVIDE)
+TRAPHANDLER_NOEC(debug, T_DEBUG)
+TRAPHANDLER_NOEC(nmi, T_NMI)
+TRAPHANDLER_NOEC(brkpt, T_BRKPT)
+TRAPHANDLER_NOEC(oflow, T_OFLOW)
+TRAPHANDLER_NOEC(bound, T_BOUND)
+TRAPHANDLER_NOEC(illop, T_ILLOP)
+TRAPHANDLER_NOEC(device, T_DEVICE)
+TRAPHANDLER_NOEC(corproc, 9)
+TRAPHANDLER_NOEC(fperr, T_FPERR)
+TRAPHANDLER_NOEC(mchk, T_MCHK)
+TRAPHANDLER_NOEC(simderr, T_SIMDERR)
 
+TRAPHANDLER(dblflt, T_DBLFLT)
+TRAPHANDLER(tss, T_TSS)
+TRAPHANDLER(segnp, T_SEGNP)
+TRAPHANDLER(stack, T_STACK)
+TRAPHANDLER(gpflt, T_GPFLT)
+TRAPHANDLER(pgflt, T_PGFLT)
+TRAPHANDLER(res,  15)
+TRAPHANDLER(align, T_ALIGN)
+TRAPHANDLER_NOEC(systemcall, T_SYSCALL)
 
+.globl sysenter_handler
+.type sysenter_handler, @function
+.align 2
+# bypass trap to reach syscall directly
+sysenter_handler:
+pushl %edi
+pushl %ebx
+pushl %ecx
+pushl %edx
+pushl %eax
+# only support 4 syscall arguments
+call syscall
+# movl $0x174, %ecx
+# movl $0, %edx
+# movl $(GD_UT), %eax	/* no need, because of continuity, GD_UT will be found by adding 16(0x10) to GD_KT */
+# wrmsr
+movl %esi, %edx
+movl %ebp, %ecx
+sysexit
 
 /*
  * Lab 3: Your code here for _alltraps
  */
+.globl _alltraps;
+_alltraps:
+# push all rest registers on stack
+pushl %ds
+pushl %es
+pushal
+
+# Set up data segments.
+movw $(GD_KD), %ax
+movw %ax, %ds
+movw %ax, %es
+
+# Call trap(tf), where tf=%esp
+pushl %esp
+call trap
+
+# trap needs return back to user space
+# pop registers and return from interrupt (iret)
 
diff --git a/lib/libmain.c b/lib/libmain.c
index 8a14b29..a9ed5a8 100644
--- a/lib/libmain.c
+++ b/lib/libmain.c
@@ -13,7 +13,8 @@ libmain(int argc, char **argv)
 {
 	// set thisenv to point at our Env structure in envs[].
 	// LAB 3: Your code here.
-	thisenv = 0;
+	envid_t envid = sys_getenvid();
+	thisenv = &envs[ENVX(envid)];
 
 	// save the name of the program so that panic() can use it
 	if (argc > 0)
diff --git a/lib/syscall.c b/lib/syscall.c
index 8d28dda..b810220 100644
--- a/lib/syscall.c
+++ b/lib/syscall.c
@@ -37,27 +37,57 @@ syscall(int num, int check, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4,
 	return ret;
 }
 
+static inline int32_t
+sysenter(int num, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4)
+{
+	// fast system call: pass system call number in AX,
+	// up to 4 parameters in DX, CX, BX, DI
+	//
+	// Interrupt kernel with MSR (CPL = 0).
+	//
+	// https://reverseengineering.stackexchange.com/questions/2869/how-to-use-sysenter-under-linux
+
+    int32_t ret;
+	asm volatile(
+		        "pushl %%ebp\n\t"
+		        "movl  %%esp, %%ebp\n\t"
+		        "leal  sysenter_ret%=, %%esi\n\t"
+		        "sysenter\n\t"
+		        "sysenter_ret%=:"
+		        "popl %%ebp\n\t"
+		        : "=a" (ret) :
+		            "a" (num),
+		            "d" (a1),
+		            "c" (a2),
+		            "b" (a3),
+		            "D" (a4)
+		        : "%esi", "memory", "cc");
+
+	return ret;
+}
+
 void
 sys_cputs(const char *s, size_t len)
 {
-	syscall(SYS_cputs, 0, (uint32_t)s, len, 0, 0, 0);
+	sysenter(SYS_cputs, (uint32_t)s, len, 0, 0);
 }
 
 int
 sys_cgetc(void)
 {
-	return syscall(SYS_cgetc, 0, 0, 0, 0, 0, 0);
+	return sysenter(SYS_cgetc, 0, 0, 0, 0);
 }
 
 int
 sys_env_destroy(envid_t envid)
 {
-	return syscall(SYS_env_destroy, 1, envid, 0, 0, 0, 0);
+	return sysenter(SYS_env_destroy, envid, 0, 0, 0);
 }
 
 envid_t
 sys_getenvid(void)
 {
-	 return syscall(SYS_getenvid, 0, 0, 0, 0, 0, 0);
+	 return sysenter(SYS_getenvid, 0, 0, 0, 0);
+	 // return syscall(SYS_getenvid, 0, 0, 0, 0, 0, 0);
 }
 
diff --git a/user/testbss.c b/user/testbss.c
index 2f8ee8e..b81e21f 100644
--- a/user/testbss.c
+++ b/user/testbss.c
@@ -14,7 +14,7 @@ umain(int argc, char **argv)
 	cprintf("Making sure bss works right...\n");
 	for (i = 0; i < ARRAYSIZE; i++)
 		if (bigarray[i] != 0)
-			panic("bigarray[%d] isn't cleared!\n", i);
+			panic("bigarray[%d] isn't cleared! 0x%08x\n", i, bigarray + i);
 	for (i = 0; i < ARRAYSIZE; i++)
 		bigarray[i] = i;
 	for (i = 0; i < ARRAYSIZE; i++)
-- 
2.24.3 (Apple Git-128)

