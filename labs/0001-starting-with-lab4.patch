From 79a62c3779902f33a6a3b33ba286e37a8436a2cd Mon Sep 17 00:00:00 2001
From: Aaron <kljsandjb@me.com>
Date: Wed, 1 Jul 2020 19:51:32 +0000
Subject: [PATCH] starting with lab4...

finish Per-CPU State and Initialization, other than
ts_iomb initialization

Part A finished
Part B: finish till exercise 11
still trying exercise 12....
---
 kern/env.c       |  9 +++---
 kern/init.c      | 14 +++++++--
 kern/kernel.ld   |  1 -
 kern/mpentry.S   | 30 +++++++++++++++++++
 kern/pmap.c      | 59 +++++++++++++++++++++++++++++--------
 kern/sched.c     | 12 ++++++++
 kern/syscall.c   | 90 +++++++++++++++++++++++++++++++++++++++++++++++++-------
 kern/trap.c      | 59 ++++++++++++++++++++++++++++++-------
 kern/trapentry.S | 17 +++++++++++
 lib/fork.c       | 79 +++++++++++++++++++++++++++++++++++++++++++++++--
 lib/pfentry.S    | 18 ++++++++++++
 lib/pgfault.c    |  5 +++-
 lib/syscall.c    | 22 ++++++++++----
 13 files changed, 365 insertions(+), 50 deletions(-)

diff --git a/kern/env.c b/kern/env.c
index a15fd9b..361241b 100644
--- a/kern/env.c
+++ b/kern/env.c
@@ -55,7 +55,7 @@ struct Segdesc gdt[NCPU + 5] =
 
 	// Per-CPU TSS descriptors (starting from GD_TSS0) are initialized
 	// in trap_init_percpu()
-	[GD_TSS0 >> 3] = SEG_NULL
+	// [GD_TSS0 >> 3] = SEG_NULL
 };
 
 struct Pseudodesc gdt_pd = {
@@ -189,10 +189,10 @@ env_setup_vm(struct Env *e)
 
 	// LAB 3: Your code here.
 	p->pp_ref++;
-	e->env_pgdir = (pte_t *)page2kva(p);
+	e->env_pgdir = (pde_t *)page2kva(p);
 	// we can copy kern part of PDEs from kern_pgdir
 	// no need to allocate more physical memory and map again
-	for (int start = PDX(UTOP); start < 1024; start ++)
+	for (int start = PDX(UTOP); start < NPDENTRIES; start ++)
 	{
 		e->env_pgdir[start] = kern_pgdir[start];
 	}
@@ -551,8 +551,7 @@ env_run(struct Env *e)
 	curenv->env_runs ++;
 
 	lcr3(PADDR(curenv->env_pgdir));
+	unlock_kernel();
 	env_pop_tf(&(curenv->env_tf));
-
-	// panic("env_run not yet implemented");
 }
 
diff --git a/kern/init.c b/kern/init.c
index e5491ec..0a0faaa 100644
--- a/kern/init.c
+++ b/kern/init.c
@@ -43,6 +43,7 @@ i386_init(void)
 
 	// Acquire the big kernel lock before waking up APs
 	// Your code here:
+	lock_kernel();
 
 	// Starting non-boot CPUs
 	boot_aps();
@@ -52,7 +53,14 @@ i386_init(void)
 	ENV_CREATE(TEST, ENV_TYPE_USER);
 #else
 	// Touch all you want.
-	ENV_CREATE(user_primes, ENV_TYPE_USER);
+	ENV_CREATE(user_yield, ENV_TYPE_USER);
+	ENV_CREATE(user_yield, ENV_TYPE_USER);
+	ENV_CREATE(user_yield, ENV_TYPE_USER);
+	ENV_CREATE(user_yield, ENV_TYPE_USER);
+	ENV_CREATE(user_yield, ENV_TYPE_USER);
+	ENV_CREATE(user_yield, ENV_TYPE_USER);
+	ENV_CREATE(user_yield, ENV_TYPE_USER);
+	ENV_CREATE(user_yield, ENV_TYPE_USER);
 #endif // TEST*
 
 	// Schedule and run the first user environment!
@@ -109,9 +117,11 @@ mp_main(void)
 	// only one CPU can enter the scheduler at a time!
 	//
 	// Your code here:
+	lock_kernel();
+	sched_yield();
 
 	// Remove this after you finish Exercise 6
-	for (;;);
+	// for (;;);
 }
 
 /*
diff --git a/kern/kernel.ld b/kern/kernel.ld
index 1cf18ef..6263cea 100644
--- a/kern/kernel.ld
+++ b/kern/kernel.ld
@@ -54,7 +54,6 @@ SECTIONS
 		*(COMMON)
 		PROVIDE(end = .);
 	}
-	PROVIDE(end = .);
 
 
 	/DISCARD/ : {
diff --git a/kern/mpentry.S b/kern/mpentry.S
index 72dd827..ec03251 100644
--- a/kern/mpentry.S
+++ b/kern/mpentry.S
@@ -30,6 +30,32 @@
 #define RELOC(x) ((x) - KERNBASE)
 #define MPBOOTPHYS(s) ((s) - mpentry_start + MPENTRY_PADDR)
 
+# MPBOOTPHYS is needed since mpentry.S is compiled and then linked to above KERNBASE
+# we cannot relay on this to calculate the global variables' addresses, current CPU
+# cannot dereference addresses that not even existed to it, it doesn't execute at linking
+# address
+
+# why boot.S doesn't need something like that? because boot loader is loaded and linked
+# at the same low address
+
+/* root@fb1f4f0cba44:/usr/src/app/lab# objdump -h obj/boot/boot.out
+
+obj/boot/boot.out:     file format elf32-i386
+
+Sections:
+Idx Name          Size      VMA       LMA       File off  Algn
+  0 .text         0000019f  00007c00  00007c00  00000074  2**2
+                  CONTENTS, ALLOC, LOAD, CODE
+  1 .eh_frame     000000a8  00007da0  00007da0  00000214  2**2
+                  CONTENTS, ALLOC, LOAD, READONLY, DATA
+  2 .stab         00000870  00000000  00000000  000002bc  2**2
+                  CONTENTS, READONLY, DEBUGGING
+  3 .stabstr      00000898  00000000  00000000  00000b2c  2**0
+                  CONTENTS, READONLY, DEBUGGING
+  4 .comment      0000002d  00000000  00000000  000013c4  2**0
+                  CONTENTS, READONLY
+*/
+
 .set PROT_MODE_CSEG, 0x8	# kernel code segment selector
 .set PROT_MODE_DSEG, 0x10	# kernel data segment selector
 
@@ -60,6 +86,10 @@ start32:
 	movw    %ax, %fs
 	movw    %ax, %gs
 
+	# just like cpu0, we enable PTE_PS bit
+	movl    %cr4, %eax
+	orl     $(CR4_PSE), %eax  # enable superpages (4MB)
+	movl    %eax, %cr4
 	# Set up initial page table. We cannot use kern_pgdir yet because
 	# we are still running at a low EIP.
 	movl    $(RELOC(entry_pgdir)), %eax
diff --git a/kern/pmap.c b/kern/pmap.c
index eb7d239..c2e22a7 100644
--- a/kern/pmap.c
+++ b/kern/pmap.c
@@ -293,6 +293,11 @@ mem_init_mp(void)
 	//
 	// LAB 4: Your code here:
 
+	for (int i = 0; i < NCPU; i++)
+	{
+		uintptr_t kstacktop = KSTACKTOP - i * (KSTKSIZE + KSTKGAP);
+		boot_map_region(kern_pgdir, kstacktop - KSTKSIZE, KSTKSIZE, PADDR(percpu_kstacks[i]), PTE_W);
+	}
 }
 
 // --------------------------------------------------------------
@@ -333,9 +338,16 @@ page_init(void)
 	// free pages!
 	pages[0].pp_ref = 1;
 	pages[0].pp_link = NULL;
+
+	size_t mpentry_pgnum = PGNUM(MPENTRY_PADDR);
+	pages[mpentry_pgnum].pp_ref = 1;
+	pages[mpentry_pgnum].pp_link = NULL;
+	
 	size_t i;
 	for (i = 1; i < npages_basemem; i++)
 	{
+		if (i == mpentry_pgnum)
+			continue;
 		pages[i].pp_ref = 0;
 		pages[i].pp_link = page_free_list;
 		page_free_list = &pages[i];
@@ -551,17 +563,18 @@ page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)
 	if (pg_tbl_entry != NULL)
 	{
 		physaddr_t pa = page2pa(pp);
-		if (PTE_ADDR(*pg_tbl_entry) == pa)
-		{
-			// do not free the page
-			pp->pp_ref--;
-			tlb_invalidate(pgdir, va);
-		}
-		else if (*pg_tbl_entry & PTE_P)
+		if (*pg_tbl_entry & PTE_P)
 		{
-			page_remove(pgdir, va);
+			if (PTE_ADDR(*pg_tbl_entry) == pa)
+			{
+				pp->pp_ref--;
+				tlb_invalidate(pgdir, va);
+			}
+			else
+			{
+				page_remove(pgdir, va);
+			}
 		}
-		
 		*pg_tbl_entry = pa | perm | PTE_P;
 		pp->pp_ref++;
 	}
@@ -678,7 +691,19 @@ mmio_map_region(physaddr_t pa, size_t size)
 	// Hint: The staff solution uses boot_map_region.
 	//
 	// Your code here:
-	panic("mmio_map_region not implemented");
+	physaddr_t pa_page_start = ROUNDDOWN(pa, PGSIZE);	// physical page including the pa
+	physaddr_t pa_page_end = ROUNDUP(pa + size, PGSIZE);	// physical page end
+	size = pa_page_end - pa_page_start;		// update size, should now be multiple of PGSIZE
+	if (base + size < MMIOLIM)
+	{
+		boot_map_region(kern_pgdir, base, size, pa_page_start, PTE_PCD | PTE_PWT | PTE_W);
+		base += size;
+		return (void *)(base - size);
+	}
+	else
+	{
+		panic("exceeding MMIOLIM...");
+	}
 }
 
 static uintptr_t user_mem_check_addr;
@@ -716,7 +741,7 @@ user_mem_check(struct Env *env, const void *va, size_t len, int perm)
 		}
 
 		pte_t *pgtbl_entry = pgdir_walk(env->env_pgdir, (const void *)pg, 0);
-		if (!pgtbl_entry || !(*pgtbl_entry & perm))
+		if (!pgtbl_entry || !(*pgtbl_entry & perm) || !(*pgtbl_entry & PTE_P))
 		{
 			user_mem_check_addr = pg == start ? (uintptr_t)va : pg;
 			return -E_FAULT;
@@ -736,7 +761,17 @@ user_mem_check(struct Env *env, const void *va, size_t len, int perm)
 void
 user_mem_assert(struct Env *env, const void *va, size_t len, int perm)
 {
-	if (user_mem_check(env, va, len, perm | PTE_U) < 0) {
+	if (user_mem_check(env, va, len, perm) < 0) {
+		cprintf("[%08x] user_mem_check assertion failure for "
+			"va %08x\n", env->env_id, user_mem_check_addr);
+		env_destroy(env);	// may not return
+	}
+	if (user_mem_check(env, va, len, PTE_U) < 0) {
+		cprintf("[%08x] user_mem_check assertion failure for "
+			"va %08x\n", env->env_id, user_mem_check_addr);
+		env_destroy(env);	// may not return
+	}
+	if (user_mem_check(env, va, len, PTE_P) < 0) {
 		cprintf("[%08x] user_mem_check assertion failure for "
 			"va %08x\n", env->env_id, user_mem_check_addr);
 		env_destroy(env);	// may not return
diff --git a/kern/sched.c b/kern/sched.c
index f595bb1..4303618 100644
--- a/kern/sched.c
+++ b/kern/sched.c
@@ -29,6 +29,18 @@ sched_yield(void)
 	// below to halt the cpu.
 
 	// LAB 4: Your code here.
+	int i = 0;
+	for (; i < NENV; i++)
+	{
+		if (envs[i].env_status == ENV_RUNNABLE)
+		{
+			env_run(&envs[i]);
+		}
+	}
+	if (curenv != NULL && curenv->env_status == ENV_RUNNING)
+	{
+		env_run(curenv);
+	}
 
 	// sched_halt never returns
 	sched_halt();
diff --git a/kern/syscall.c b/kern/syscall.c
index 4e8145a..4e88e9d 100644
--- a/kern/syscall.c
+++ b/kern/syscall.c
@@ -22,9 +22,11 @@ sys_cputs(const char *s, size_t len)
 	// Destroy the environment if not.
 
 	// LAB 3: Your code here.
-	user_mem_assert(curenv, s, len, PTE_P);
-	cprintf("Will write from address: 0x%08x to address: 0x%08x\n", s, s + len);
-	if ((uint32_t)ROUNDUP(s, PGSIZE) != USTACKTOP || (uint32_t)ROUNDUP(s + len, PGSIZE) != USTACKTOP)
+	user_mem_assert(curenv, s, len, PTE_U);
+	// cprintf("Will write from address: 0x%08x to address: 0x%08x\n", s, s + len);
+	int u_stackcheck = (uint32_t)ROUNDUP(s, PGSIZE) != USTACKTOP || (uint32_t)ROUNDUP(s + len, PGSIZE) != USTACKTOP;
+	int ux_stackcheck = (uint32_t)ROUNDUP(s, PGSIZE) != UXSTACKTOP || (uint32_t)ROUNDUP(s + len, PGSIZE) != UXSTACKTOP;
+	if (u_stackcheck && ux_stackcheck)
 	{
 		env_destroy(curenv);
 	}
@@ -90,7 +92,15 @@ sys_exofork(void)
 	// will appear to return 0.
 
 	// LAB 4: Your code here.
-	panic("sys_exofork not implemented");
+	struct Env *child = NULL;
+	int ret = 0;
+	if ((ret = env_alloc(&child, curenv->env_id)) != 0)
+		return ret;
+	child->env_status = ENV_NOT_RUNNABLE;
+	child->env_tf = curenv->env_tf;
+	child->env_tf.tf_regs.reg_eax = 0;
+
+	return child->env_id;
 }
 
 // Set envid's env_status to status, which must be ENV_RUNNABLE
@@ -110,7 +120,16 @@ sys_env_set_status(envid_t envid, int status)
 	// envid's status.
 
 	// LAB 4: Your code here.
-	panic("sys_env_set_status not implemented");
+	if (status != ENV_NOT_RUNNABLE && status != ENV_RUNNABLE)
+		return -E_INVAL;
+
+	struct Env *env = NULL;
+	int ret = 0;
+	if ((ret = envid2env(envid, &env, 1)) != 0)
+		return ret;
+
+	env->env_status = status;
+	return 0;
 }
 
 // Set the page fault upcall for 'envid' by modifying the corresponding struct
@@ -125,7 +144,11 @@ static int
 sys_env_set_pgfault_upcall(envid_t envid, void *func)
 {
 	// LAB 4: Your code here.
-	panic("sys_env_set_pgfault_upcall not implemented");
+	struct Env *env = NULL;
+	if (envid2env(envid, &env, 1) != 0)
+		return -E_BAD_ENV;
+	env->env_pgfault_upcall = func;
+	return 0;
 }
 
 // Allocate a page of memory and map it at 'va' with permission
@@ -155,7 +178,24 @@ sys_page_alloc(envid_t envid, void *va, int perm)
 	//   allocated!
 
 	// LAB 4: Your code here.
-	panic("sys_page_alloc not implemented");
+	struct Env *env = NULL;
+	if (envid2env(envid, &env, 1) != 0)
+		return -E_BAD_ENV;
+	if ((uintptr_t)va >= UTOP || (uintptr_t)va % PGSIZE)
+		return -E_INVAL;
+	if ((perm & PTE_P) == 0 || (perm & PTE_U) == 0 || (perm & ~PTE_SYSCALL) != 0)
+		return -E_INVAL;
+
+	struct PageInfo *page = page_alloc(0);
+	if (page == NULL)
+		return -E_NO_MEM;
+	if (page_insert(env->env_pgdir, page, va, perm) != 0)
+	{
+		page_free(page);
+		return -E_NO_MEM;
+	}
+
+	return 0;
 }
 
 // Map the page of memory at 'srcva' in srcenvid's address space
@@ -184,9 +224,19 @@ sys_page_map(envid_t srcenvid, void *srcva,
 	//   parameters for correctness.
 	//   Use the third argument to page_lookup() to
 	//   check the current permissions on the page.
+	struct Env *srcenv, *dstenv;
+	if (envid2env(srcenvid, &srcenv, 1) != 0 || envid2env(dstenvid, &dstenv, 1) != 0)
+		return -E_BAD_ENV;
+	if ((uintptr_t)srcva >= UTOP || (uintptr_t)dstva >= UTOP || (uintptr_t)srcva % PGSIZE || (uintptr_t)dstva % PGSIZE)
+		return -E_INVAL;
 
-	// LAB 4: Your code here.
-	panic("sys_page_map not implemented");
+	pte_t *src_pgtbl_entry = NULL;
+	struct PageInfo *src_page = page_lookup(srcenv->env_pgdir, srcva, &src_pgtbl_entry);
+	if (src_page == NULL || (perm & PTE_P) == 0 || (perm & PTE_U) == 0 || (perm & ~PTE_SYSCALL) != 0)
+		return -E_INVAL;
+	if ((perm & PTE_W) && !(*src_pgtbl_entry & PTE_W))
+		return -E_INVAL;
+	return page_insert(dstenv->env_pgdir, src_page, dstva, perm);
 }
 
 // Unmap the page of memory at 'va' in the address space of 'envid'.
@@ -202,7 +252,13 @@ sys_page_unmap(envid_t envid, void *va)
 	// Hint: This function is a wrapper around page_remove().
 
 	// LAB 4: Your code here.
-	panic("sys_page_unmap not implemented");
+	struct Env *env = NULL;
+	if (envid2env(envid, &env, 1) != 0)
+		return -E_BAD_ENV;
+	if ((uintptr_t)va >= UTOP || (uintptr_t)va % PGSIZE)
+		return -E_INVAL;
+	page_remove(env->env_pgdir, va);
+	return 0;
 }
 
 // Try to send 'value' to the target env 'envid'.
@@ -289,6 +345,20 @@ syscall(uint32_t syscallno, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4,
 		return sys_getenvid();
 	case SYS_env_destroy:
 		return sys_env_destroy(a1);
+	case SYS_page_alloc:
+		return sys_page_alloc(a1, (void *)a2, a3);
+	case SYS_page_map:
+		return sys_page_map(a1, (void *)a2, a3, (void *)a4, a5);
+	case SYS_page_unmap:
+		return sys_page_unmap(a1, (void *)a2);
+	case SYS_exofork:
+		return sys_exofork();
+	case SYS_env_set_status:
+		return sys_env_set_status(a1, a2);
+	case SYS_env_set_pgfault_upcall:
+		return sys_env_set_pgfault_upcall(a1, (void *)a2);
+	case SYS_yield:
+		sys_yield();
 	case NSYSCALLS:
 	default:
 		return -E_INVAL;
diff --git a/kern/trap.c b/kern/trap.c
index 6dae2b4..76624d8 100644
--- a/kern/trap.c
+++ b/kern/trap.c
@@ -73,12 +73,8 @@ void
 trap_init(void)
 {
 	extern struct Segdesc gdt[];
-	extern void sysenter_handler();
 
 	// LAB 3: Your code here.
-	wrmsr(0x174, GD_KT, 0);		// set (CPL = 0) CS & SS
-	wrmsr(0x176, (uint32_t)sysenter_handler, 0);		// the sysenter handler address
-	wrmsr(0x175, KSTACKTOP, 0);	// the stack where we drop in when trapped into kernel
 
 	int vector = 0;
 	for (; vector < 32; vector++)
@@ -129,21 +125,26 @@ trap_init_percpu(void)
 	// user space on that CPU.
 	//
 	// LAB 4: Your code here:
+	extern void sysenter_handler();
+	uintptr_t kstacktop_percpu = (uintptr_t)percpu_kstacks[thiscpu->cpu_id] + KSTKSIZE;
+	wrmsr(0x174, GD_KT, 0);		// set (CPL = 0) CS & SS
+	wrmsr(0x176, (uint32_t)sysenter_handler, 0);		// the sysenter handler address
+	wrmsr(0x175, kstacktop_percpu, 0);	// the stack where we drop in when trapped into kernel
 
 	// Setup a TSS so that we get the right stack
 	// when we trap to the kernel.
-	ts.ts_esp0 = KSTACKTOP;
-	ts.ts_ss0 = GD_KD;
-	ts.ts_iomb = sizeof(struct Taskstate);
+	thiscpu->cpu_ts.ts_esp0 = kstacktop_percpu;
+	thiscpu->cpu_ts.ts_ss0 = GD_KD;
+	// thiscpu->cpu_ts.ts_iomb = MMIOBASE; // how to initialize this io base?
 
 	// Initialize the TSS slot of the gdt.
-	gdt[GD_TSS0 >> 3] = SEG16(STS_T32A, (uint32_t) (&ts),
+	gdt[(GD_TSS0 >> 3) + thiscpu->cpu_id] = SEG16(STS_T32A, (uint32_t) (&thiscpu->cpu_ts),
 					sizeof(struct Taskstate) - 1, 0);
-	gdt[GD_TSS0 >> 3].sd_s = 0;
+	gdt[(GD_TSS0 >> 3) + thiscpu->cpu_id].sd_s = 0;
 
 	// Load the TSS selector (like other segment selectors, the
 	// bottom three bits are special; we leave them 0)
-	ltr(GD_TSS0);
+	ltr(GD_TSS0 + (thiscpu->cpu_id << 3)); // see env gdt init
 
 	// Load the IDT
 	lidt(&idt_pd);
@@ -268,6 +269,15 @@ trap(struct Trapframe *tf)
 		// Acquire the big kernel lock before doing any
 		// serious kernel work.
 		// LAB 4: Your code here.
+
+		// Question 2: Why do we still need separate kernel stacks for each CPU?
+		// Answer: 
+		// 1. CPU 0 got interrupted into the kernel from user space, it will push tf_0 on single stack 
+		// 2. CPU 1 got interrupted too, then tf_1 is pushed on stack, and wait for irq_0 return (CPU 0 holding the lock)
+		// 3. irq_0 return, it will pop tf_1 out and try to restore user state, but what it should pop is tf_0
+		// more: https://stackoverflow.com/a/13953815/6289529
+
+		lock_kernel();
 		assert(curenv);
 
 		// Garbage collect if current enviroment is a zombie
@@ -352,7 +362,36 @@ page_fault_handler(struct Trapframe *tf)
 	//   (the 'tf' variable points at 'curenv->env_tf').
 
 	// LAB 4: Your code here.
+	if (curenv->env_pgfault_upcall == NULL)
+		goto end;
 
+	struct UTrapframe *utf = (struct UTrapframe *)UXSTACKTOP;
+	if (ROUNDUP(tf->tf_esp, PGSIZE) == UXSTACKTOP)
+	{
+		// recursive user exception
+		uint32_t *empty_word = (uint32_t *)(tf->tf_esp - 4);
+		*empty_word = 0;
+		utf = (struct UTrapframe *)empty_word;
+	}
+	utf -= 1; // reserve space for UTrapframe
+	// before we actually make any writing, we check the memory
+	//
+	// Note: we are currently under kernel mode, if we fail below
+	// memory access, we end up with a fault in kernel mode, which
+	// definitely panic the kernel, so we have to be very careful,
+	// we cannot check too early or too late
+	user_mem_assert(curenv, utf, sizeof(struct UTrapframe), PTE_W);
+	utf->utf_fault_va = fault_va;
+	utf->utf_err = tf->tf_err;
+	utf->utf_regs = tf->tf_regs;
+	utf->utf_eip = tf->tf_eip;
+	utf->utf_eflags = tf->tf_eflags;
+	utf->utf_esp = tf->tf_esp;
+
+	tf->tf_esp = (uintptr_t)&utf->utf_fault_va;
+	tf->tf_eip = (uintptr_t)curenv->env_pgfault_upcall;
+	env_run(curenv);
+end:
 	// Destroy the environment that caused the fault.
 	cprintf("[%08x] user fault va %08x ip %08x\n",
 		curenv->env_id, fault_va, tf->tf_eip);
diff --git a/kern/trapentry.S b/kern/trapentry.S
index a1e5db3..bccd25d 100644
--- a/kern/trapentry.S
+++ b/kern/trapentry.S
@@ -53,6 +53,16 @@ default_handlers:
 .align 2
 # bypass trap to reach syscall directly
 sysenter_handler:
+pushl %ecx
+pushl %edx
+pushl %eax
+pushl $kernel_lock
+call spin_lock
+addl $4, %esp
+popl %eax
+popl %edx
+popl %ecx
+
 pushl %edi
 pushl %ebx
 pushl %ecx
@@ -64,6 +74,13 @@ call syscall
 # movl $0, %edx
 # movl $(GD_UT), %eax	/* no need, because of continuity, GD_UT will be found by adding 16(0x10) to GD_KT */
 # wrmsr
+pushl %eax
+pushl $kernel_lock
+call spin_unlock
+pause
+addl $4, %esp
+popl %eax
+
 movl %esi, %edx
 movl %ebp, %ecx
 sysexit
diff --git a/lib/fork.c b/lib/fork.c
index 61264da..3f19405 100644
--- a/lib/fork.c
+++ b/lib/fork.c
@@ -25,6 +25,14 @@ pgfault(struct UTrapframe *utf)
 	//   (see <inc/memlayout.h>).
 
 	// LAB 4: Your code here.
+	if ((err & FEC_WR) != FEC_WR)
+	{
+		panic("Access is not writing, err code %d\n", err);
+	}
+	if ((uvpt[PGNUM(addr)] & PTE_COW) != PTE_COW)
+	{
+		panic("Fault address not marked as Copy-on-Write");
+	}
 
 	// Allocate a new page, map it at a temporary location (PFTEMP),
 	// copy the data from the old page to the new page, then move the new
@@ -33,8 +41,16 @@ pgfault(struct UTrapframe *utf)
 	//   You should make three system calls.
 
 	// LAB 4: Your code here.
+	envid_t envid = sys_getenvid();
+	// cprintf("fault addr 0x%x, envid %x\n", addr, envid);
+	addr = ROUNDDOWN(addr, PGSIZE);	// page-size aligned
 
-	panic("pgfault not implemented");
+	if ((r = sys_page_alloc(envid, PFTEMP, PTE_P | PTE_U | PTE_W)) != 0)
+		panic("sys_page_alloc, %e", r);
+	memmove((void *)PFTEMP, addr, PGSIZE);
+	// remap the addr with newly allocated writable page
+	if  ((r = sys_page_map(envid, PFTEMP, envid, addr, PTE_P | PTE_U | PTE_W)) != 0)
+		panic("sys_page_map, %e, fault addr 0x%x", r, addr);
 }
 
 //
@@ -54,7 +70,26 @@ duppage(envid_t envid, unsigned pn)
 	int r;
 
 	// LAB 4: Your code here.
-	panic("duppage not implemented");
+	int perm = PTE_P | PTE_U;	// at least PTE_P and PTE_U
+	envid_t curenvid = sys_getenvid();
+
+	int is_wr = (uvpt[pn] & PTE_W) == PTE_W;
+	int is_cow = (uvpt[pn] & PTE_COW) == PTE_COW;
+	void *addr = (void *)(pn * PGSIZE);
+	if (is_wr || is_cow)
+	{
+		// create new mapping
+		if ((r = sys_page_map(curenvid, addr, envid, addr, perm | PTE_COW)) != 0)
+			panic("sys_page_map, %e", r);
+		if ((r = sys_page_map(curenvid, addr, curenvid, addr, perm | PTE_COW)) != 0)
+			panic("sys_page_map, %e", r);
+	}
+	else
+	{
+		// only remap child without PTE_COW
+		if ((r = sys_page_map(curenvid, addr, envid, addr, perm)) != 0)
+			panic("sys_page_map, %e", r);
+	}
 	return 0;
 }
 
@@ -78,7 +113,45 @@ envid_t
 fork(void)
 {
 	// LAB 4: Your code here.
-	panic("fork not implemented");
+	int r;
+	uint8_t *addr;	// uint_8 * easier for calculation...
+	set_pgfault_handler(pgfault);
+	envid_t child = sys_exofork();
+	if (child < 0)
+		panic("sys_exofork, %e", child);
+	if (child == 0)
+	{
+		// I am child, fix the 'thisenv'
+		thisenv = &envs[ENVX(sys_getenvid())];
+		return 0;
+	}
+
+	// creating exception stack for child to run with,
+	// child inherits 'pgfault' handler globally from parent
+	// but still needs install 'pgfault_upcall' for child otherwise
+	// when child is up and running, it will page fault on its runtime stack
+	// because the child's pgdir doesn't map any page for (USTACKTOP - PGSIZE)
+	// set_pgfault_handler(pgfault);
+
+	if ((r = sys_page_alloc(child, (void *)(UXSTACKTOP - PGSIZE), PTE_P | PTE_U | PTE_W)) != 0)
+		panic("sys_page_alloc, %e", r);
+	extern void _pgfault_upcall(void);
+	if ((r = sys_env_set_pgfault_upcall(child, _pgfault_upcall)) != 0)
+		panic("sys_env_set_pgfault_upcall, %e", r);
+
+	for (addr = 0; addr < (uint8_t *)(UTOP - PGSIZE); addr += PGSIZE)
+	{
+		if ((uvpd[PDX(addr)] & PTE_P) == PTE_P && (uvpt[PGNUM(addr)] & PTE_P) == PTE_P)
+		{
+			duppage(child, PGNUM(addr));
+		}
+	}
+
+	// Start the child environment running
+	if ((r = sys_env_set_status(child, ENV_RUNNABLE)) < 0)
+		panic("sys_env_set_status: %e", r);
+
+	return child;
 }
 
 // Challenge!
diff --git a/lib/pfentry.S b/lib/pfentry.S
index f40aeeb..82919ac 100644
--- a/lib/pfentry.S
+++ b/lib/pfentry.S
@@ -65,18 +65,36 @@ _pgfault_upcall:
 	// ways as registers become unavailable as scratch space.
 	//
 	// LAB 4: Your code here.
+	movl 0x28(%esp), %eax	# trap-time %eip
+	movl 0x30(%esp), %ecx	# trap-time %esp
+	leal -4(%ecx), %edx		# reserve space for holding trap-time %eip
+	movl %eax, (%edx)		# push trap-time %eip onto trap-time %esp
+	movl %edx, 0x30(%esp)	# update trap-time %esp in utf memory
 
 	// Restore the trap-time registers.  After you do this, you
 	// can no longer modify any general-purpose registers.
 	// LAB 4: Your code here.
+	addl $8, %esp		# skip fault_va and error code
+	popl %edi
+	popl %esi
+	popl %ebp
+	addl $4, %esp		# skip reg_oesp
+	popl %ebx
+	popl %edx
+	popl %ecx
+	popl %eax
+	addl $4, %esp		# skip trap-time %eip
 
 	// Restore eflags from the stack.  After you do this, you can
 	// no longer use arithmetic operations or anything else that
 	// modifies eflags.
 	// LAB 4: Your code here.
+	popfl		# restore eflags
 
 	// Switch back to the adjusted trap-time stack.
 	// LAB 4: Your code here.
+	popl %esp
 
 	// Return to re-execute the instruction that faulted.
 	// LAB 4: Your code here.
+	ret		# pop out stored %eip from new stack
diff --git a/lib/pgfault.c b/lib/pgfault.c
index a975518..0cb1b33 100644
--- a/lib/pgfault.c
+++ b/lib/pgfault.c
@@ -29,7 +29,10 @@ set_pgfault_handler(void (*handler)(struct UTrapframe *utf))
 	if (_pgfault_handler == 0) {
 		// First time through!
 		// LAB 4: Your code here.
-		panic("set_pgfault_handler not implemented");
+		if ((r = sys_page_alloc(sys_getenvid(), (void *)(UXSTACKTOP - PGSIZE), PTE_P | PTE_U | PTE_W)) != 0)
+			panic("sys_page_alloc, %e", r);
+		if ((r = sys_env_set_pgfault_upcall(sys_getenvid(), _pgfault_upcall)) != 0)
+			panic("sys_env_set_pgfault_upcall, %e", r);
 	}
 
 	// Save handler pointer for assembly to call.
diff --git a/lib/syscall.c b/lib/syscall.c
index 3fa7936..198d53b 100644
--- a/lib/syscall.c
+++ b/lib/syscall.c
@@ -47,6 +47,8 @@ sysenter(int num, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4)
 	//
 	// https://reverseengineering.stackexchange.com/questions/2869/how-to-use-sysenter-under-linux
 
+	// we also need to lock kernel here
+
     int32_t ret;
 	asm volatile(
 		        "pushl %%ebp\n\t"
@@ -87,32 +89,40 @@ sys_env_destroy(envid_t envid)
 envid_t
 sys_getenvid(void)
 {
-	 return sysenter(SYS_getenvid, 0, 0, 0, 0);
-	 // return syscall(SYS_getenvid, 0, 0, 0, 0, 0, 0);
+	return sysenter(SYS_getenvid, 0, 0, 0, 0);
 }
 
 void
 sys_yield(void)
 {
+	// Question 4: Whenever the kernel switches from one environment to another, it must ensure the old environment's
+	// registers are saved so they can be restored properly later. Why? Where does this happen?
+	//
+	// Answer: the kernel switches from one env to another by calling 'sys_yield', which will use 'int 0x30' to save
+	// current env status in kernel stack, next time, it will use env_run to restore
+	//
+	// Note: this system call cannot be implemented by 'sysenter', since it needs to record any update of trapframe,
+	// 'sysenter' will not be able to do so
 	syscall(SYS_yield, 0, 0, 0, 0, 0, 0);
 }
 
 int
 sys_page_alloc(envid_t envid, void *va, int perm)
 {
-	return syscall(SYS_page_alloc, 1, envid, (uint32_t) va, perm, 0, 0);
+	return sysenter(SYS_page_alloc, envid, (uint32_t) va, perm, 0);
 }
 
 int
 sys_page_map(envid_t srcenv, void *srcva, envid_t dstenv, void *dstva, int perm)
 {
+	// sysenter doesn't support 5 arguments
 	return syscall(SYS_page_map, 1, srcenv, (uint32_t) srcva, dstenv, (uint32_t) dstva, perm);
 }
 
 int
 sys_page_unmap(envid_t envid, void *va)
 {
-	return syscall(SYS_page_unmap, 1, envid, (uint32_t) va, 0, 0, 0);
+	return sysenter(SYS_page_unmap, envid, (uint32_t) va, 0, 0);
 }
 
 // sys_exofork is inlined in lib.h
@@ -120,13 +130,13 @@ sys_page_unmap(envid_t envid, void *va)
 int
 sys_env_set_status(envid_t envid, int status)
 {
-	return syscall(SYS_env_set_status, 1, envid, status, 0, 0, 0);
+	return sysenter(SYS_env_set_status, envid, status, 0, 0);
 }
 
 int
 sys_env_set_pgfault_upcall(envid_t envid, void *upcall)
 {
-	return syscall(SYS_env_set_pgfault_upcall, 1, envid, (uint32_t) upcall, 0, 0, 0);
+	return sysenter(SYS_env_set_pgfault_upcall, envid, (uint32_t) upcall, 0, 0);
 }
 
 int
-- 
2.11.0

