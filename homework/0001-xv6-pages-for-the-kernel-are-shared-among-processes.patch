From a5e3b69a5fe68097d95f431c71e345bc93ec9d6f Mon Sep 17 00:00:00 2001
From: Aaron <kljsandjb@me.com>
Date: Sun, 14 Jun 2020 23:27:42 +0200
Subject: [PATCH] xv6 pages for the kernel are shared among processes

---
 vm.c | 43 +++++++++++++++++++++++++++++++------------
 1 file changed, 31 insertions(+), 12 deletions(-)

diff --git a/vm.c b/vm.c
index 1e821ed..047c873 100644
--- a/vm.c
+++ b/vm.c
@@ -118,20 +118,27 @@ static struct kmap {
 pde_t*
 setupkvm(void)
 {
+  if (!kpgdir)
+    panic("where is kernel pgdir?\n");
   pde_t *pgdir;
-  struct kmap *k;
-
-  if((pgdir = (pde_t*)kalloc()) == 0)
+  if ((pgdir = (pde_t *)kalloc()) == 0)
     return 0;
   memset(pgdir, 0, PGSIZE);
-  if (P2V(PHYSTOP) > (void*)DEVSPACE)
-    panic("PHYSTOP too high");
-  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-                (uint)k->phys_start, k->perm) < 0) {
-      freevm(pgdir);
-      return 0;
+  // copy pdes from kernel page directory
+  // only copy needed ones, we don't do memmove
+  struct kmap *k;
+  for (k = kmap; k < &kmap[NELEM(kmap)]; k++)
+  {
+    uint sz = k->phys_end - k->phys_start, i;
+    for (i = 0; i <= (sz >> PDXSHIFT); i++)
+    {
+      int idx = PDX(k->virt) + i;
+      if (idx < NPDENTRIES)
+        pgdir[idx] = kpgdir[idx];
+      // cprintf("index is %d\n", PDX(k->virt) + i);
     }
+  }
+
   return pgdir;
 }
 
@@ -140,7 +147,17 @@ setupkvm(void)
 void
 kvmalloc(void)
 {
-  kpgdir = setupkvm();
+  struct kmap *k;
+  if((kpgdir = (pde_t*)kalloc()) == 0)
+    panic("kvmalloc");
+  memset(kpgdir, 0, PGSIZE);
+  if (P2V(PHYSTOP) > (void*)DEVSPACE)
+    panic("PHYSTOP too high");
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+    if(mappages(kpgdir, k->virt, k->phys_end - k->phys_start,
+                (uint)k->phys_start, k->perm) < 0) {
+      freevm(kpgdir);
+    }
   switchkvm();
 }
 
@@ -288,7 +305,9 @@ freevm(pde_t *pgdir)
   if(pgdir == 0)
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
-  for(i = 0; i < NPDENTRIES; i++){
+  // 0 - NPDENTRYIES/2 will map user space
+  // we only free user
+  for(i = 0; i < NPDENTRIES/2; i++){
     if(pgdir[i] & PTE_P){
       char * v = P2V(PTE_ADDR(pgdir[i]));
       kfree(v);
-- 
2.24.3 (Apple Git-128)

