From 35ca2719a13f6c139849f451081c7d121f1c5cd3 Mon Sep 17 00:00:00 2001
From: Aaron <kljsandjb@me.com>
Date: Sat, 6 Jun 2020 20:01:21 +0200
Subject: [PATCH] chapter 2 Page Tables, Exercise 1 - 3

---
 Makefile   |  1 +
 exec.c     | 18 ++++++++++++++++--
 kalloc.c   |  2 +-
 main.c     |  7 ++++++-
 sbrktest.c | 46 ++++++++++++++++++++++++++++++++++++++++++++++
 vm.c       |  2 +-
 6 files changed, 71 insertions(+), 5 deletions(-)
 create mode 100644 sbrktest.c

diff --git a/Makefile b/Makefile
index e26ed07..60cef2d 100644
--- a/Makefile
+++ b/Makefile
@@ -182,6 +182,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_date\
+	_sbrktest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/exec.c b/exec.c
index b40134f..0833f06 100644
--- a/exec.c
+++ b/exec.c
@@ -72,13 +72,25 @@ exec(char *path, char **argv)
   for(argc = 0; argv[argc]; argc++) {
     if(argc >= MAXARG)
       goto bad;
-    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;  // if argv is too large, might hit inaccessible area
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
       goto bad;
-    ustack[3+argc] = sp;
+    ustack[3+argc] = sp;    // save the address of each argument
   }
   ustack[3+argc] = 0;
 
+  // ustack structure (will be copied to user runtime stack):
+  /*|     0      |*/   /*high*/
+  /*|------------|*/
+  /*|  &argv[0]  |*/
+  /*|  &argv[1]  |*/
+  /*|   ......   |*/
+  /*|  &argv[N]  |*/
+  /*|------------|*/
+  /*|  argv ptr  |*/
+  /*|   argc     |*/
+  /*| 0xffffffff |*/   /*low*/
+
   ustack[0] = 0xffffffff;  // fake return PC
   ustack[1] = argc;
   ustack[2] = sp - (argc+1)*4;  // argv pointer
@@ -102,6 +114,8 @@ exec(char *path, char **argv)
   switchuvm(curproc);
   freevm(oldpgdir);
   return 0;
+  // drop into trapret, restore new process context with new image installed,
+  // the curproc's kernel stack contains new information needed (eip, esp, pgdir...)
 
  bad:
   if(pgdir)
diff --git a/kalloc.c b/kalloc.c
index 14cd4f4..3f6e10b 100644
--- a/kalloc.c
+++ b/kalloc.c
@@ -70,7 +70,7 @@ kfree(char *v)
   if(kmem.use_lock)
     acquire(&kmem.lock);
   r = (struct run*)v;
-  r->next = kmem.freelist;
+  r->next = kmem.freelist;  // store struct in page itself
   kmem.freelist = r;
   if(kmem.use_lock)
     release(&kmem.lock);
diff --git a/main.c b/main.c
index 9924e64..20f2c2f 100644
--- a/main.c
+++ b/main.c
@@ -18,7 +18,7 @@ int
 main(void)
 {
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
-  kvmalloc();      // kernel page table
+  kvmalloc();      // kernel page table, after this, entrypgdir will expire
   mpinit();        // detect other processors
   lapicinit();     // interrupt controller
   seginit();       // segment descriptors
@@ -99,6 +99,11 @@ startothers(void)
 // hence the __aligned__ attribute.
 // PTE_PS in a page directory entry enables 4Mbyte pages.
 
+// When PTE_PS is enabled, the pgdir entries below (entrypgdir[0] and entrypgdir[512])
+// directly point to a physical page(4MB), only 1 level addressing
+
+// if PTE_PS is clear, these entries point to a page table page (4K), in this case we
+// also need to setup page table separately, to have 2 levels addressing
 __attribute__((__aligned__(PGSIZE)))
 pde_t entrypgdir[NPDENTRIES] = {
   // Map VA's [0, 4MB) to PA's [0, 4MB)
diff --git a/sbrktest.c b/sbrktest.c
new file mode 100644
index 0000000..d8c7186
--- /dev/null
+++ b/sbrktest.c
@@ -0,0 +1,46 @@
+#include "types.h"
+#include "user.h"
+
+// In qemu console:
+// 1. use 'info cpus' to see if you are in user space
+// (qemu) cpu 1
+// (qemu) info cpus
+//  CPU #0: pc=0x0000000080103d20 thread_id=17473
+//* CPU #1: pc=0x0000000000000001 thread_id=17473
+// 
+// 2. if you are not, use 'cpu 1' to set default CPU (thread)
+// 3. 'info pg' and we now can see user space page mappings:
+// 
+// breakpoint set: sys_sbrk(line 58 to avoid race condition)->trapret
+//
+// before sbrk
+// (qemu) info pg
+// VPN range     Entry         Flags        Physical page
+// [00000-003ff]  PDE[000]     ----A--UWP
+// [00000-00000]  PTE[000]     ----A--UWP 0dee2
+// [00001-00001]  PTE[001]     --------WP 0dee0
+// [00002-00002]  PTE[002]     ---DA--UWP 0dedf
+
+// after sbrk
+// (qemu) info pg
+// VPN range     Entry         Flags        Physical page
+// [00000-003ff]  PDE[000]     ----A--UWP
+// [00000-00000]  PTE[000]     ----A--UWP 0dee2
+// [00001-00001]  PTE[001]     --------WP 0dee0
+// [00002-00002]  PTE[002]     ---DA--UWP 0dedf
+// [00003-00003]  PTE[003]     -------UWP 0dfbc (newly allocated page after sbrk(1))
+
+// a new physical page will be allocted and page table also will be updated
+
+int main(int argc, char *argv[])
+{
+	if (sbrk(1) == (char *)-1)
+	{
+		printf(2, "sbrk failed\n");
+		exit();
+	}
+
+	printf(1, "sbrk success\n");
+
+	exit();		// must be exit(), if we return, fake PC 0xffffffff will take over, then got killed... 
+}
\ No newline at end of file
diff --git a/vm.c b/vm.c
index 7134cff..7ca8f7a 100644
--- a/vm.c
+++ b/vm.c
@@ -237,7 +237,7 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
       deallocuvm(pgdir, newsz, oldsz);
       return 0;
     }
-    memset(mem, 0, PGSIZE);
+    memset(mem, 0, PGSIZE); // when load new binary, if there is any gap (memsz - filesz), fill with 0
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
       cprintf("allocuvm out of memory (2)\n");
       deallocuvm(pgdir, newsz, oldsz);
-- 
2.24.3 (Apple Git-128)

