From db607060bb3682a46442485e9c55ea4308c3bfb5 Mon Sep 17 00:00:00 2001
From: Aaron <kljsandjb@me.com>
Date: Mon, 3 Aug 2020 14:43:13 +0000
Subject: [PATCH] support threading in process

---
 defs.h    |   1 +
 proc.c    | 111 +++++++++++++++++++++++++++++++++++++++++++-----------
 proc.h    |  16 ++++++++
 syscall.c |   5 ++-
 syscall.h |   3 +-
 sysproc.c |  24 ++++++++++++
 user.h    |   1 +
 usys.S    |   1 +
 uthread.c |  19 ++++++++++
 9 files changed, 158 insertions(+), 23 deletions(-)

diff --git a/defs.h b/defs.h
index 8627d58..6929dbc 100644
--- a/defs.h
+++ b/defs.h
@@ -123,6 +123,7 @@ void yield(void);
 
 // swtch.S
 void swtch(struct context **, struct context *);
+struct thread *allocthread(void);
 
 // spinlock.c
 void acquire(struct spinlock *);
diff --git a/proc.c b/proc.c
index bf1fec1..2492c4d 100644
--- a/proc.c
+++ b/proc.c
@@ -102,10 +102,72 @@ found:
   p->alarmhandler = 0;
   p->alarmticks = 0;
   p->ticksleft = 0;
+  
+  p->thread = 0;  // only main thread
 
   return p;
 }
 
+// create a new execute thread for a process
+// return this thread if succeed
+// return 0 for failure
+//       |-----------------------|
+//       |    struct thread      |
+//esp,   |-----------------------|
+//thread |      trap frame       |
+//       |-----------------------|
+//       |    thread context     |
+//       |-----------------------|
+//       |.........              |
+//       |.......                |
+//kstack     ......
+struct thread *allocthread(void) {
+   struct thread *thread;
+   char *esp; // start of struct thread, start of kernel stack
+   char *page;
+
+   if ((page = kalloc()) == 0) {
+     cprintf("create thread failed, out of memory\n");
+     return 0;
+   }
+
+   // allocate space for holding structure thread
+   esp = page + KSTACKSIZE - sizeof(struct thread);
+   thread = (struct thread *)esp;
+
+   thread->thread_kstacktop = esp;
+   thread->state = FREE;
+   thread->next = 0;
+   // we don't need a lock to update per process list
+   struct proc *p = myproc();
+   
+   // append the new thread to the end
+   struct thread **dumy_head = &(p->thread);
+   for (; *dumy_head != 0; dumy_head = &(*dumy_head)->next);
+   *dumy_head = thread;
+
+   // allocate for thread trapframe
+   esp -= sizeof(struct trapframe);
+   thread->thread_tf = (struct trapframe *)esp;
+   memset(thread->thread_tf, 0, sizeof(struct trapframe));
+   thread->thread_tf->cs = p->tf->cs;
+   thread->thread_tf->ds = p->tf->ds;
+   thread->thread_tf->es = p->tf->es;
+   thread->thread_tf->ss = p->tf->ss;
+   thread->thread_tf->eflags = p->tf->eflags;
+
+   esp -= 4;
+   *(uint *)esp = (uint)trapret;
+   
+   // allocate for kernel thread per user thread
+   esp -= sizeof(struct context);
+   thread->thread_ctx = (struct context *)esp;
+   memset(thread->thread_ctx, 0, sizeof(struct context));
+   thread->thread_ctx->eip = (uint)forkret; // we rely on forkret to release the lock
+
+   return thread;
+}
+
 // PAGEBREAK: 32
 // Set up first user process.
 void userinit(void) {
@@ -123,6 +185,10 @@ void userinit(void) {
           (int)_binary_initcode_size); // now mapping self's content
   p->sz = PGSIZE;
   memset(p->tf, 0, sizeof(*p->tf));
+  // we need to set low 2 bits in CS, otherwise
+  // user program would instead use kernel stack
+  // when trapped into kernel, we will fail to
+  // fetch the syscall arguments (%esp & %cs keep same)
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
   p->tf->es = p->tf->ds;
@@ -146,27 +212,6 @@ void userinit(void) {
   release(&ptable.lock);
 }
 
-// Grow current process's memory by n bytes.
-// Return 0 on success, -1 on failure.
-// int
-// growproc(int n)
-// {
-//   uint sz;
-//   struct proc *curproc = myproc();
-
-//   sz = curproc->sz;
-//   if(n > 0){
-//     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-//       return -1;
-//   } else if(n < 0){
-//     if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-//       return -1;
-//   }
-//   curproc->sz = sz;
-//   switchuvm(curproc);
-//   return 0;
-// }
-
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
@@ -318,6 +363,30 @@ void scheduler(void) {
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+      if (p->state == RUNNING)
+      {
+         struct thread *t = p->thread;
+        //  while (t)
+        //  {
+            if (t && t->state == THD_RUNNABLE)
+            {
+                cprintf("cpu %d picks one thread now\n", c->apicid);
+                c->proc = p;
+                pushcli();
+                c->gdt[SEG_TSS] = SEG16(STS_T32A, &c->ts, sizeof(c->ts) - 1, 0);
+                c->gdt[SEG_TSS].s = 0;
+                c->ts.ss0 = SEG_KDATA << 3;
+                c->ts.esp0 = (uint)t->thread_kstacktop; // set the per thread's kernel stack
+                c->ts.iomb = (ushort)0xFFFF;
+                lcr3(V2P(p->pgdir));
+                popcli();
+                t->state = THD_RUNNING;
+                swtch(&(c->scheduler), t->thread_ctx);
+                switchkvm();
+            }
+        //     t = p->thread->next;
+        //  }
+      }
       if (p->state != RUNNABLE)
         continue;
 
diff --git a/proc.h b/proc.h
index 654230b..5e8905a 100644
--- a/proc.h
+++ b/proc.h
@@ -10,6 +10,20 @@ struct cpu {
   struct proc *proc;         // The process running on this cpu or null
 };
 
+// a thread is still considered running under its process context,
+// so the trapframe is needed for returning to process context.
+// do we need a kstack for each thread? Yeah, sure...
+// we alloc a page and put thread struct into that page, let rest be the stack
+enum threadstate {FREE, THD_RUNNING, THD_RUNNABLE};
+struct thread {
+   uint thread_id;
+   enum threadstate state;
+   struct thread *next;
+   char *thread_kstacktop;
+   struct trapframe *thread_tf;       // Trap frame for current syscall
+   struct context *thread_ctx;    // swtch() here to run thread
+};
+
 extern struct cpu cpus[NCPU];
 extern int ncpu;
 
@@ -52,6 +66,8 @@ struct proc {
   uint alarmticks;            // the interval per process alarm action
   uint ticksleft;             // ticks left for another action, range: [0, alarmticks]
   void (*alarmhandler)();     // the alarm handler
+
+  struct thread *thread;   // support secondary threads in process
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 032695d..8ed28f4 100644
--- a/syscall.c
+++ b/syscall.c
@@ -96,6 +96,7 @@ extern int sys_uptime(void);
 extern int sys_date(void);
 extern int sys_dup2(void);
 extern int sys_alarm(void);
+extern int sys_create_thread(void);
 
 // we register syscall interfaces here
 static int (*syscalls[])(void) = {
@@ -107,6 +108,7 @@ static int (*syscalls[])(void) = {
     [SYS_write] sys_write, [SYS_mknod] sys_mknod,   [SYS_unlink] sys_unlink,
     [SYS_link] sys_link,   [SYS_mkdir] sys_mkdir,   [SYS_close] sys_close,
     [SYS_date] sys_date,   [SYS_dup2] sys_dup2,     [SYS_alarm] sys_alarm,
+    [SYS_uthread_create] sys_create_thread,
 };
 
 // use a string table for the name, any better idea?
@@ -120,6 +122,7 @@ static char *syscallnames[] = {
     [SYS_write] "write", [SYS_mknod] "mknod",   [SYS_unlink] "unlink",
     [SYS_link] "link",   [SYS_mkdir] "mkdir",   [SYS_close] "close",
     [SYS_date] "date",   [SYS_dup2] "dup2",     [SYS_alarm] "alarm",
+    [SYS_uthread_create] "create_thread",
 };
 
 // breakpoint here, x/37x
@@ -164,7 +167,7 @@ void syscall(void) {
     //   cprintf("first argument: %s\n", argument);
 
     curproc->tf->eax = syscalls[num]();
-    if (num != 16)
+    if (num != SYS_write)
       cprintf("%s -> %d\n\n", syscallnames[num], curproc->tf->eax);
   } else {
     cprintf("%d %s: unknown sys call %d\n", curproc->pid, curproc->name, num);
diff --git a/syscall.h b/syscall.h
index f1bcf02..d9f0fc7 100644
--- a/syscall.h
+++ b/syscall.h
@@ -22,4 +22,5 @@
 #define SYS_close 21
 #define SYS_date 22
 #define SYS_dup2 23
-#define SYS_alarm 24
\ No newline at end of file
+#define SYS_alarm 24
+#define SYS_uthread_create 25
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 3d35ace..e99f33b 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -103,3 +103,27 @@ int sys_alarm(void) {
   myproc()->ticksleft = ticks;
   return 0;
 }
+
+int sys_create_thread(void) {
+   int thread_id;
+   void (*entry)();
+   int esp;
+   if (argint(0, &thread_id) < 0)
+     return -1;
+   if (argptr(1, (char **)&entry, 4) < 0)
+     return -1;
+   if (argint(2, &esp) < 0)
+     return -1;
+   
+   struct thread *t;
+   if ((t= allocthread()) == 0)
+     return -1;
+   t->thread_id = thread_id;
+   t->thread_tf->eip = (uint)entry;
+   t->thread_tf->esp = (uint)esp;
+
+   //finally, mark this thread as runnable
+   // other CPU may pick this job
+   t->state = THD_RUNNABLE;
+   return 0;
+}
\ No newline at end of file
diff --git a/user.h b/user.h
index 859f982..04bda7b 100644
--- a/user.h
+++ b/user.h
@@ -26,6 +26,7 @@ int sleep(int);
 int uptime(void);
 int date(struct rtcdate *);
 int alarm(uint, void (*)());
+int uthread_create(uint, uint, uint);
 
 // ulib.c
 int stat(const char *, struct stat *);
diff --git a/usys.S b/usys.S
index 14f284b..5730172 100644
--- a/usys.S
+++ b/usys.S
@@ -33,3 +33,4 @@ SYSCALL(uptime)
 SYSCALL(date)
 SYSCALL(dup2)
 SYSCALL(alarm)
+SYSCALL(uthread_create)
\ No newline at end of file
diff --git a/uthread.c b/uthread.c
index 66fc1f8..54d1da0 100644
--- a/uthread.c
+++ b/uthread.c
@@ -35,6 +35,7 @@ thread_init(void)
   current_thread->state = RUNNING;
 }
 
+// make multiple CPUs enter the thread scheduler, pick the thread and run respectively
 static void 
 thread_schedule(void)
 {
@@ -66,6 +67,16 @@ thread_schedule(void)
     next_thread = 0;
 }
 
+/*
+ once we create a thread, maybe we need to add it
+ to the group in the kernel, so the kernel could
+ assign idle CPUs to it (via system call)
+
+ but this group should be per process owned, maybe
+ we can add this in struct proc (kernel code),
+ could be a linked-list so that we can dynamically
+ update it
+*/
 void 
 thread_create(void (*func)())
 {
@@ -79,6 +90,14 @@ thread_create(void (*func)())
   * (int *) (t->sp) = (int)func;           // push return address on stack
   t->sp -= 32;                             // space for registers that thread_switch expects
   t->state = RUNNABLE;
+
+  // make a system call, pass the thread_schedule() to the kernel,
+  // let idle CPUs enter the scheduler
+  if (uthread_create((uint)t, (uint)func, (uint)t->sp) != 0)
+  {
+     printf(2, "uthread_create syscall failed!\n");
+     exit();
+  }
 }
 
 void 
-- 
2.20.1

